{"version":3,"file":"testability.d.ts","sources":["testability.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { NgZone } from '../zone/ng_zone';\n/**\n * Testability API.\n * `declare` keyword causes tsickle to generate externs, so these methods are\n * not renamed by Closure Compiler.\n * @publicApi\n */\nexport declare interface PublicTestability {\n    isStable(): boolean;\n    whenStable(callback: Function, timeout?: number, updateCallback?: Function): void;\n    findProviders(using: any, provider: string, exactMatch: boolean): any[];\n}\nexport interface PendingMacrotask {\n    source: string;\n    creationLocation: Error;\n    runCount?: number;\n    data: TaskData;\n}\nexport interface TaskData {\n    target?: XMLHttpRequest;\n    delay?: number;\n    isPeriodic?: boolean;\n}\nexport declare type DoneCallback = (didWork: boolean, tasks?: PendingMacrotask[]) => void;\nexport declare type UpdateCallback = (tasks: PendingMacrotask[]) => boolean;\n/**\n * The Testability service provides testing hooks that can be accessed from\n * the browser and by services such as Protractor. Each bootstrapped Angular\n * application on the page will have an instance of Testability.\n * @publicApi\n */\nexport declare class Testability implements PublicTestability {\n    private _ngZone;\n    private _pendingCount;\n    private _isZoneStable;\n    private _callbacks;\n    private taskTrackingZone;\n    constructor(_ngZone: NgZone);\n    private _watchAngularEvents;\n    /**\n     * Increases the number of pending request\n     * @deprecated pending requests are now tracked with zones.\n     */\n    increasePendingRequestCount(): number;\n    /**\n     * Decreases the number of pending request\n     * @deprecated pending requests are now tracked with zones\n     */\n    decreasePendingRequestCount(): number;\n    /**\n     * Whether an associated application is stable\n     */\n    isStable(): boolean;\n    private _runCallbacksIfReady;\n    private getPendingTasks;\n    private addCallback;\n    /**\n     * Wait for the application to be stable with a timeout. If the timeout is reached before that\n     * happens, the callback receives a list of the macro tasks that were pending, otherwise null.\n     *\n     * @param doneCb The callback to invoke when Angular is stable or the timeout expires\n     *    whichever comes first.\n     * @param timeout Optional. The maximum time to wait for Angular to become stable. If not\n     *    specified, whenStable() will wait forever.\n     * @param updateCb Optional. If specified, this callback will be invoked whenever the set of\n     *    pending macrotasks changes. If this callback returns true doneCb will not be invoked\n     *    and no further updates will be issued.\n     */\n    whenStable(doneCb: Function, timeout?: number, updateCb?: Function): void;\n    /**\n     * Get the number of pending requests\n     * @deprecated pending requests are now tracked with zones\n     */\n    getPendingRequestCount(): number;\n    /**\n     * Find providers by name\n     * @param using The root element to search from\n     * @param provider The name of binding variable\n     * @param exactMatch Whether using exactMatch\n     */\n    findProviders(using: any, provider: string, exactMatch: boolean): any[];\n}\n/**\n * A global registry of {@link Testability} instances for specific elements.\n * @publicApi\n */\nexport declare class TestabilityRegistry {\n    constructor();\n    /**\n     * Registers an application with a testability hook so that it can be tracked\n     * @param token token of application, root element\n     * @param testability Testability hook\n     */\n    registerApplication(token: any, testability: Testability): void;\n    /**\n     * Unregisters an application.\n     * @param token token of application, root element\n     */\n    unregisterApplication(token: any): void;\n    /**\n     * Unregisters all applications\n     */\n    unregisterAllApplications(): void;\n    /**\n     * Get a testability hook associated with the application\n     * @param elem root element\n     */\n    getTestability(elem: any): Testability | null;\n    /**\n     * Get all registered testabilities\n     */\n    getAllTestabilities(): Testability[];\n    /**\n     * Get all registered applications(root elements)\n     */\n    getAllRootElements(): any[];\n    /**\n     * Find testability of a node in the Tree\n     * @param elem node\n     * @param findInAncestors whether finding testability in ancestors if testability was not found in\n     * current node\n     */\n    findTestabilityInTree(elem: Node, findInAncestors?: boolean): Testability | null;\n}\n/**\n * Adapter interface for retrieving the `Testability` service associated for a\n * particular context.\n *\n * @publicApi\n */\nexport interface GetTestability {\n    addToWindow(registry: TestabilityRegistry): void;\n    findTestabilityInTree(registry: TestabilityRegistry, elem: any, findInAncestors: boolean): Testability | null;\n}\n/**\n * Set the {@link GetTestability} implementation used by the Angular testing framework.\n * @publicApi\n */\nexport declare function setTestabilityGetter(getter: GetTestability): void;\n"]}