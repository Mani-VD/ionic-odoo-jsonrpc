{"version":3,"file":"xsrf.d.ts","sources":["xsrf.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpHandler } from './backend';\nimport { HttpInterceptor } from './interceptor';\nimport { HttpRequest } from './request';\nimport { HttpEvent } from './response';\nexport declare const XSRF_COOKIE_NAME: InjectionToken<string>;\nexport declare const XSRF_HEADER_NAME: InjectionToken<string>;\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n * @publicApi\n */\nexport declare abstract class HttpXsrfTokenExtractor {\n    /**\n     * Get the XSRF token to use with an outgoing request.\n     *\n     * Will be called for every request, so the token may change between requests.\n     */\n    abstract getToken(): string | null;\n}\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\nexport declare class HttpXsrfCookieExtractor implements HttpXsrfTokenExtractor {\n    private doc;\n    private platform;\n    private cookieName;\n    private lastCookieString;\n    private lastToken;\n    constructor(doc: any, platform: string, cookieName: string);\n    getToken(): string | null;\n}\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\nexport declare class HttpXsrfInterceptor implements HttpInterceptor {\n    private tokenService;\n    private headerName;\n    constructor(tokenService: HttpXsrfTokenExtractor, headerName: string);\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>>;\n}\n"]}