{"version":3,"file":"interceptor.d.ts","sources":["interceptor.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpHandler } from './backend';\nimport { HttpRequest } from './request';\nimport { HttpEvent } from './response';\n/**\n * Intercepts `HttpRequest` and handles them.\n *\n * Most interceptors will transform the outgoing request before passing it to the\n * next interceptor in the chain, by calling `next.handle(transformedReq)`.\n *\n * In rare cases, interceptors may wish to completely handle a request themselves,\n * and not delegate to the remainder of the chain. This behavior is allowed.\n *\n * @publicApi\n */\nexport interface HttpInterceptor {\n    /**\n     * Intercept an outgoing `HttpRequest` and optionally transform it or the\n     * response.\n     *\n     * Typically an interceptor will transform the outgoing request before returning\n     * `next.handle(transformedReq)`. An interceptor may choose to transform the\n     * response event stream as well, by applying additional Rx operators on the stream\n     * returned by `next.handle()`.\n     *\n     * More rarely, an interceptor may choose to completely handle the request itself,\n     * and compose a new event stream instead of invoking `next.handle()`. This is\n     * acceptable behavior, but keep in mind further interceptors will be skipped entirely.\n     *\n     * It is also rare but valid for an interceptor to return multiple responses on the\n     * event stream for a single request.\n     */\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>>;\n}\n/**\n * `HttpHandler` which applies an `HttpInterceptor` to an `HttpRequest`.\n *\n *\n */\nexport declare class HttpInterceptorHandler implements HttpHandler {\n    private next;\n    private interceptor;\n    constructor(next: HttpHandler, interceptor: HttpInterceptor);\n    handle(req: HttpRequest<any>): Observable<HttpEvent<any>>;\n}\n/**\n * A multi-provider token which represents the array of `HttpInterceptor`s that\n * are registered.\n *\n * @publicApi\n */\nexport declare const HTTP_INTERCEPTORS: InjectionToken<HttpInterceptor[]>;\nexport declare class NoopInterceptor implements HttpInterceptor {\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>>;\n}\n"]}