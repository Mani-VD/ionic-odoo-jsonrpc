{"version":3,"file":"client.d.ts","sources":["client.d.ts"],"names":[],"mappingssourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Observable } from 'rxjs';\nimport { HttpHandler } from './backend';\nimport { HttpHeaders } from './headers';\nimport { HttpParams } from './params';\nimport { HttpRequest } from './request';\nimport { HttpEvent, HttpResponse } from './response';\nexport declare type HttpObserve = 'body' | 'events' | 'response';\n/**\n * Perform HTTP requests.\n *\n * `HttpClient` is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies according to which\n * signature is called (mainly the values of `observe` and `responseType`).\n *\n * @publicApi\n */\nexport declare class HttpClient {\n    private handler;\n    constructor(handler: HttpHandler);\n    /**\n     * Send the given `HttpRequest` and return a stream of `HttpEvents`.\n     */\n    request<R>(req: HttpRequest<any>): Observable<HttpEvent<R>>;\n    /**\n     * Construct a request which interprets the body as an `ArrayBuffer` and returns it.\n     *\n     * @return an `Observable` of the body as an `ArrayBuffer`.\n     */\n    request(method: string, url: string, options: {\n        body?: any;\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<ArrayBuffer>;\n    /**\n     * Construct a request which interprets the body as a `Blob` and returns it.\n     *\n     * @return an `Observable` of the body as a `Blob`.\n     */\n    request(method: string, url: string, options: {\n        body?: any;\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<Blob>;\n    /**\n     * Construct a request which interprets the body as text and returns it.\n     *\n     * @return an `Observable` of the body as a `string`.\n     */\n    request(method: string, url: string, options: {\n        body?: any;\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<string>;\n    /**\n     * Construct a request which interprets the body as an `ArrayBuffer` and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `ArrayBuffer`.\n     */\n    request(method: string, url: string, options: {\n        body?: any;\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        observe: 'events';\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<ArrayBuffer>>;\n    /**\n     * Construct a request which interprets the body as an `Blob` and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `Blob`.\n     */\n    request(method: string, url: string, options: {\n        body?: any;\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<Blob>>;\n    /**\n     * Construct a request which interprets the body as text and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `string`.\n     */\n    request(method: string, url: string, options: {\n        body?: any;\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<string>>;\n    /**\n     * Construct a request which interprets the body as JSON and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `Object`.\n     */\n    request(method: string, url: string, options: {\n        body?: any;\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<any>>;\n    /**\n     * Construct a request which interprets the body as JSON and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `R`.\n     */\n    request<R>(method: string, url: string, options: {\n        body?: any;\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<R>>;\n    /**\n     * Construct a request which interprets the body as an `ArrayBuffer` and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `ArrayBuffer`.\n     */\n    request(method: string, url: string, options: {\n        body?: any;\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<ArrayBuffer>>;\n    /**\n     * Construct a request which interprets the body as a `Blob` and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `Blob`.\n     */\n    request(method: string, url: string, options: {\n        body?: any;\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<Blob>>;\n    /**\n     * Construct a request which interprets the body as text and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `string`.\n     */\n    request(method: string, url: string, options: {\n        body?: any;\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<string>>;\n    /**\n     * Construct a request which interprets the body as JSON and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `Object`.\n     */\n    request(method: string, url: string, options: {\n        body?: any;\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<Object>>;\n    /**\n     * Construct a request which interprets the body as JSON and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `R`.\n     */\n    request<R>(method: string, url: string, options: {\n        body?: any;\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<R>>;\n    /**\n     * Construct a request which interprets the body as JSON and returns it.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `Object`.\n     */\n    request(method: string, url: string, options?: {\n        body?: any;\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        responseType?: 'json';\n        reportProgress?: boolean;\n        withCredentials?: boolean;\n    }): Observable<Object>;\n    /**\n     * Construct a request which interprets the body as JSON and returns it.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `R`.\n     */\n    request<R>(method: string, url: string, options?: {\n        body?: any;\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        responseType?: 'json';\n        reportProgress?: boolean;\n        withCredentials?: boolean;\n    }): Observable<R>;\n    /**\n     * Construct a request in a manner where response type and requested `Observable` are not known\n     * statically.\n     *\n     * @return an `Observable` of whatever was requested, typed to `any`.\n     */\n    request(method: string, url: string, options?: {\n        body?: any;\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        observe?: HttpObserve;\n        reportProgress?: boolean;\n        responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n        withCredentials?: boolean;\n    }): Observable<any>;\n    /**\n     * Construct a DELETE request which interprets the body as an `ArrayBuffer` and returns it.\n     *\n     * @return an `Observable` of the body as an `ArrayBuffer`.\n     */\n    delete(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<ArrayBuffer>;\n    /**\n     * Construct a DELETE request which interprets the body as a `Blob` and returns it.\n     *\n     * @return an `Observable` of the body as a `Blob`.\n     */\n    delete(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<Blob>;\n    /**\n     * Construct a DELETE request which interprets the body as text and returns it.\n     *\n     * @return an `Observable` of the body as a `string`.\n     */\n    delete(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<string>;\n    /**\n     * Construct a DELETE request which interprets the body as an `ArrayBuffer` and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `ArrayBuffer`.\n     */\n    delete(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<ArrayBuffer>>;\n    /**\n     * Construct a DELETE request which interprets the body as a `Blob` and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `Blob`.\n     */\n    delete(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<Blob>>;\n    /**\n     * Construct a DELETE request which interprets the body as text and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `string`.\n     */\n    delete(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<string>>;\n    /**\n     * Construct a DELETE request which interprets the body as JSON and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `Object`.\n     */\n    delete(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<Object>>;\n    /**\n     * Construct a DELETE request which interprets the body as JSON and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `T`.\n     */\n    delete<T>(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<T>>;\n    /**\n     * Construct a DELETE request which interprets the body as an `ArrayBuffer` and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `ArrayBuffer`.\n     */\n    delete(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<ArrayBuffer>>;\n    /**\n     * Construct a DELETE request which interprets the body as a `Blob` and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `Blob`.\n     */\n    delete(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<Blob>>;\n    /**\n     * Construct a DELETE request which interprets the body as text and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `string`.\n     */\n    delete(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<string>>;\n    /**\n     * Construct a DELETE request which interprets the body as JSON and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `Object`.\n     */\n    delete(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<Object>>;\n    /**\n     * Construct a DELETE request which interprets the body as JSON and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `T`.\n     */\n    delete<T>(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<T>>;\n    /**\n     * Construct a DELETE request which interprets the body as JSON and returns it.\n     *\n     * @return an `Observable` of the body as an `Object`.\n     */\n    delete(url: string, options?: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<Object>;\n    /**\n     * Construct a DELETE request which interprets the body as JSON and returns it.\n     *\n     * @return an `Observable` of the body as type `T`.\n     */\n    delete<T>(url: string, options?: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<T>;\n    /**\n     * Construct a GET request which interprets the body as an `ArrayBuffer` and returns it.\n     *\n     * @return an `Observable` of the body as an `ArrayBuffer`.\n     */\n    get(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<ArrayBuffer>;\n    /**\n     * Construct a GET request which interprets the body as a `Blob` and returns it.\n     *\n     * @return an `Observable` of the body as a `Blob`.\n     */\n    get(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<Blob>;\n    /**\n     * Construct a GET request which interprets the body as text and returns it.\n     *\n     * @return an `Observable` of the body as a `string`.\n     */\n    get(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<string>;\n    /**\n     * Construct a GET request which interprets the body as an `ArrayBuffer` and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `ArrayBuffer`.\n     */\n    get(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<ArrayBuffer>>;\n    /**\n     * Construct a GET request which interprets the body as a `Blob` and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `Blob`.\n     */\n    get(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<Blob>>;\n    /**\n     * Construct a GET request which interprets the body as text and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `string`.\n     */\n    get(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<string>>;\n    /**\n     * Construct a GET request which interprets the body as JSON and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `Object`.\n     */\n    get(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<Object>>;\n    /**\n     * Construct a GET request which interprets the body as JSON and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `T`.\n     */\n    get<T>(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<T>>;\n    /**\n     * Construct a GET request which interprets the body as an `ArrayBuffer` and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `ArrayBuffer`.\n     */\n    get(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<ArrayBuffer>>;\n    /**\n     * Construct a GET request which interprets the body as a `Blob` and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `Blob`.\n     */\n    get(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<Blob>>;\n    /**\n     * Construct a GET request which interprets the body as text and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `string`.\n     */\n    get(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<string>>;\n    /**\n     * Construct a GET request which interprets the body as JSON and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `Object`.\n     */\n    get(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<Object>>;\n    /**\n     * Construct a GET request which interprets the body as JSON and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `T`.\n     */\n    get<T>(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<T>>;\n    /**\n     * Construct a GET request which interprets the body as JSON and returns it.\n     *\n     * @return an `Observable` of the body as an `Object`.\n     */\n    get(url: string, options?: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<Object>;\n    /**\n     * Construct a GET request which interprets the body as JSON and returns it.\n     *\n     * @return an `Observable` of the body as type `T`.\n     */\n    get<T>(url: string, options?: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<T>;\n    /**\n     * Construct a HEAD request which interprets the body as an `ArrayBuffer` and returns it.\n     *\n     * @return an `Observable` of the body as an `ArrayBuffer`.\n     */\n    head(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<ArrayBuffer>;\n    head(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<Blob>;\n    /**\n     * Construct a HEAD request which interprets the body as text and returns it.\n     *\n     * @return an `Observable` of the body as a `string`.\n     */\n    head(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<string>;\n    /**\n     * Construct a HEAD request which interprets the body as an `ArrayBuffer` and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `ArrayBuffer`.\n     */\n    head(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<ArrayBuffer>>;\n    /**\n     * Construct a HEAD request which interprets the body as a `Blob` and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `Blob`.\n     */\n    head(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<Blob>>;\n    /**\n     * Construct a HEAD request which interprets the body as text and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `string`.\n     */\n    head(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<string>>;\n    /**\n     * Construct a HEAD request which interprets the body as JSON and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `Object`.\n     */\n    head(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<Object>>;\n    /**\n     * Construct a HEAD request which interprets the body as JSON and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `T`.\n     */\n    head<T>(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<T>>;\n    /**\n     * Construct a HEAD request which interprets the body as an `ArrayBuffer` and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `ArrayBuffer`.\n     */\n    head(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<ArrayBuffer>>;\n    /**\n     * Construct a HEAD request which interprets the body as a `Blob` and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `Blob`.\n     */\n    head(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<Blob>>;\n    /**\n     * Construct a HEAD request which interprets the body as text and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `string`.\n     */\n    head(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<string>>;\n    /**\n     * Construct a HEAD request which interprets the body as JSON and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `Object`.\n     */\n    head(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<Object>>;\n    /**\n     * Construct a HEAD request which interprets the body as JSON and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `T`.\n     */\n    head<T>(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<T>>;\n    /**\n     * Construct a HEAD request which interprets the body as JSON and returns it.\n     *\n     * @return an `Observable` of the body as an `Object`.\n     */\n    head(url: string, options?: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<Object>;\n    /**\n     * Construct a HEAD request which interprets the body as JSON and returns it.\n     *\n     * @return an `Observable` of the body as type `T`.\n     */\n    head<T>(url: string, options?: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<T>;\n    /**\n     * Construct a JSONP request for the given URL and name of the callback parameter.\n     *\n     * @return an `Observable` of the response object as an `Object`\n     */\n    jsonp(url: string, callbackParam: string): Observable<Object>;\n    /**\n     * Construct a JSONP request for the given URL and name of the callback parameter.\n     *\n     * @return an `Observable` of the response object as type `T`.\n     */\n    jsonp<T>(url: string, callbackParam: string): Observable<T>;\n    /**\n     * Make an OPTIONS request which interprets the body as an `ArrayBuffer` and returns it.\n     *\n     * @return an `Observable` of the body as an `ArrayBuffer`.\n     */\n    options(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<ArrayBuffer>;\n    /**\n     * Construct an OPTIONS request which interprets the body as a `Blob` and returns it.\n     *\n     * @return an `Observable` of the body as a `Blob`.\n     */\n    options(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<Blob>;\n    /**\n     * Construct an OPTIONS request which interprets the body as text and returns it.\n     *\n     * @return an `Observable` of the body as a `string`.\n     */\n    options(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<string>;\n    /**\n     * Construct an OPTIONS request which interprets the body as an `ArrayBuffer` and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `ArrayBuffer`.\n     */\n    options(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<ArrayBuffer>>;\n    /**\n     * Construct an OPTIONS request which interprets the body as a `Blob` and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `Blob`.\n     */\n    options(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<Blob>>;\n    /**\n     * Construct an OPTIONS request which interprets the body as text and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `string`.\n     */\n    options(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<string>>;\n    /**\n     * Construct an OPTIONS request which interprets the body as JSON and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `Object`.\n     */\n    options(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<Object>>;\n    /**\n     * Construct an OPTIONS request which interprets the body as JSON and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `T`.\n     */\n    options<T>(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<T>>;\n    /**\n     * Construct an OPTIONS request which interprets the body as an `ArrayBuffer` and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `ArrayBuffer`.\n     */\n    options(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<ArrayBuffer>>;\n    /**\n     * Construct an OPTIONS request which interprets the body as a `Blob` and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `Blob`.\n     */\n    options(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<Blob>>;\n    /**\n     * Construct an OPTIONS request which interprets the body as text and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `string`.\n     */\n    options(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<string>>;\n    /**\n     * Construct an OPTIONS request which interprets the body as JSON and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `Object`.\n     */\n    options(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<Object>>;\n    /**\n     * Construct an OPTIONS request which interprets the body as JSON and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `T`.\n     */\n    options<T>(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<T>>;\n    /**\n     * Construct an OPTIONS request which interprets the body as JSON and returns it.\n     *\n     * @return an `Observable` of the body as an `Object`.\n     */\n    options(url: string, options?: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<Object>;\n    /**\n     * Construct an OPTIONS request which interprets the body as JSON and returns it.\n     *\n     * @return an `Observable` of the body as type `T`.\n     */\n    options<T>(url: string, options?: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<T>;\n    /**\n     * Construct a PATCH request which interprets the body as an `ArrayBuffer` and returns it.\n     *\n     * @return an `Observable` of the body as an `ArrayBuffer`.\n     */\n    patch(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<ArrayBuffer>;\n    /**\n     * Construct a PATCH request which interprets the body as a `Blob` and returns it.\n     *\n     * @return an `Observable` of the body as a `Blob`.\n     */\n    patch(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<Blob>;\n    /**\n     * Construct a PATCH request which interprets the body as text and returns it.\n     *\n     * @return an `Observable` of the body as a `string`.\n     */\n    patch(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<string>;\n    /**\n     * Construct a PATCH request which interprets the body as an `ArrayBuffer` and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `ArrayBuffer`.\n     */\n    patch(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<ArrayBuffer>>;\n    /**\n     * Construct a PATCH request which interprets the body as a `Blob` and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `Blob`.\n     */\n    patch(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<Blob>>;\n    /**\n     * Construct a PATCH request which interprets the body as text and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `string`.\n     */\n    patch(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<string>>;\n    /**\n     * Construct a PATCH request which interprets the body as JSON and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `Object`.\n     */\n    patch(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<Object>>;\n    /**\n     * Construct a PATCH request which interprets the body as JSON and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `T`.\n     */\n    patch<T>(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<T>>;\n    /**\n     * Construct a PATCH request which interprets the body as an `ArrayBuffer` and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `ArrayBuffer`.\n     */\n    patch(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<ArrayBuffer>>;\n    /**\n     * Construct a PATCH request which interprets the body as a `Blob` and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `Blob`.\n     */\n    patch(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<Blob>>;\n    /**\n     * Construct a PATCH request which interprets the body as text and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `string`.\n     */\n    patch(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<string>>;\n    /**\n     * Construct a PATCH request which interprets the body as JSON and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `Object`.\n     */\n    patch(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<Object>>;\n    /**\n     * Construct a PATCH request which interprets the body as JSON and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `T`.\n     */\n    patch<T>(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<T>>;\n    /**\n     * Construct a PATCH request which interprets the body as JSON and returns it.\n     *\n     * @return an `Observable` of the body as an `Object`.\n     */\n    patch(url: string, body: any | null, options?: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<Object>;\n    /**\n     * Construct a PATCH request which interprets the body as JSON and returns it.\n     *\n     * @return an `Observable` of the body as type `T`.\n     */\n    patch<T>(url: string, body: any | null, options?: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<T>;\n    /**\n     * Construct a POST request which interprets the body as an `ArrayBuffer` and returns it.\n     *\n     * @return an `Observable` of the body as an `ArrayBuffer`.\n     */\n    post(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<ArrayBuffer>;\n    /**\n     * Construct a POST request which interprets the body as a `Blob` and returns it.\n     *\n     * @return an `Observable` of the body as a `Blob`.\n     */\n    post(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<Blob>;\n    /**\n     * Construct a POST request which interprets the body as text and returns it.\n     *\n     * @return an `Observable` of the body as a `string`.\n     */\n    post(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<string>;\n    /**\n     * Construct a POST request which interprets the body as an `ArrayBuffer` and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `ArrayBuffer`.\n     */\n    post(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<ArrayBuffer>>;\n    /**\n     * Construct a POST request which interprets the body as a `Blob` and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `Blob`.\n     */\n    post(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<Blob>>;\n    /**\n     * Construct a POST request which interprets the body as text and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `string`.\n     */\n    post(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<string>>;\n    /**\n     * Construct a POST request which interprets the body as JSON and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `Object`.\n     */\n    post(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<Object>>;\n    /**\n     * Construct a POST request which interprets the body as JSON and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `T`.\n     */\n    post<T>(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<T>>;\n    /**\n     * Construct a POST request which interprets the body as an `ArrayBuffer` and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `ArrayBuffer`.\n     */\n    post(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<ArrayBuffer>>;\n    /**\n     * Construct a POST request which interprets the body as a `Blob` and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `Blob`.\n     */\n    post(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<Blob>>;\n    /**\n     * Construct a POST request which interprets the body as text and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `string`.\n     */\n    post(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<string>>;\n    /**\n     * Construct a POST request which interprets the body as JSON and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `Object`.\n     */\n    post(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<Object>>;\n    /**\n     * Construct a POST request which interprets the body as JSON and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `T`.\n     */\n    post<T>(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<T>>;\n    /**\n     * Construct a POST request which interprets the body as JSON and returns it.\n     *\n     * @return an `Observable` of the body as an `Object`.\n     */\n    post(url: string, body: any | null, options?: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<Object>;\n    /**\n     * Construct a POST request which interprets the body as JSON and returns it.\n     *\n     * @return an `Observable` of the body as type `T`.\n     */\n    post<T>(url: string, body: any | null, options?: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<T>;\n    /**\n     * Construct a PUT request which interprets the body as an `ArrayBuffer` and returns it.\n     *\n     * @return an `Observable` of the body as an `ArrayBuffer`.\n     */\n    put(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<ArrayBuffer>;\n    /**\n     * Construct a PUT request which interprets the body as a `Blob` and returns it.\n     *\n     * @return an `Observable` of the body as a `Blob`.\n     */\n    put(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<Blob>;\n    /**\n     * Construct a PUT request which interprets the body as text and returns it.\n     *\n     * @return an `Observable` of the body as a `string`.\n     */\n    put(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<string>;\n    /**\n     * Construct a PUT request which interprets the body as an `ArrayBuffer` and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `ArrayBuffer`.\n     */\n    put(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<ArrayBuffer>>;\n    /**\n     * Construct a PUT request which interprets the body as a `Blob` and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `Blob`.\n     */\n    put(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<Blob>>;\n    /**\n     * Construct a PUT request which interprets the body as text and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `string`.\n     */\n    put(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<string>>;\n    /**\n     * Construct a PUT request which interprets the body as JSON and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `Object`.\n     */\n    put(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<Object>>;\n    /**\n     * Construct a PUT request which interprets the body as JSON and returns the full event stream.\n     *\n     * @return an `Observable` of all `HttpEvent`s for the request, with a body type of `T`.\n     */\n    put<T>(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<T>>;\n    /**\n     * Construct a PUT request which interprets the body as an `ArrayBuffer` and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `ArrayBuffer`.\n     */\n    put(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<ArrayBuffer>>;\n    /**\n     * Construct a PUT request which interprets the body as a `Blob` and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `Blob`.\n     */\n    put(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<Blob>>;\n    /**\n     * Construct a PUT request which interprets the body as text and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `string`.\n     */\n    put(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<string>>;\n    /**\n     * Construct a PUT request which interprets the body as JSON and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `Object`.\n     */\n    put(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<Object>>;\n    /**\n     * Construct a PUT request which interprets the body as JSON and returns the full response.\n     *\n     * @return an `Observable` of the `HttpResponse` for the request, with a body type of `T`.\n     */\n    put<T>(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<T>>;\n    /**\n     * Construct a PUT request which interprets the body as JSON and returns it.\n     *\n     * @return an `Observable` of the body as an `Object`.\n     */\n    put(url: string, body: any | null, options?: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<Object>;\n    /**\n     * Construct a PUT request which interprets the body as JSON and returns it.\n     *\n     * @return an `Observable` of the body as type `T`.\n     */\n    put<T>(url: string, body: any | null, options?: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<T>;\n}\n"]}