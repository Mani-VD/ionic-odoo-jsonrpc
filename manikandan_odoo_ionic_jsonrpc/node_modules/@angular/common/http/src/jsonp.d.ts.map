{"version":3,"file":"jsonp.d.ts","sources":["jsonp.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Observable } from 'rxjs';\nimport { HttpBackend, HttpHandler } from './backend';\nimport { HttpRequest } from './request';\nimport { HttpEvent } from './response';\nexport declare const JSONP_ERR_NO_CALLBACK = \"JSONP injected script did not invoke callback.\";\nexport declare const JSONP_ERR_WRONG_METHOD = \"JSONP requests must use JSONP request method.\";\nexport declare const JSONP_ERR_WRONG_RESPONSE_TYPE = \"JSONP requests must use Json response type.\";\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n *\n */\nexport declare abstract class JsonpCallbackContext {\n    [key: string]: (data: any) => void;\n}\n/**\n * `HttpBackend` that only processes `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n *\n * @publicApi\n */\nexport declare class JsonpClientBackend implements HttpBackend {\n    private callbackMap;\n    private document;\n    constructor(callbackMap: JsonpCallbackContext, document: any);\n    /**\n     * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n     */\n    private nextCallback;\n    /**\n     * Process a JSONP request and return an event stream of the results.\n     */\n    handle(req: HttpRequest<never>): Observable<HttpEvent<any>>;\n}\n/**\n * An `HttpInterceptor` which identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n * @publicApi\n */\nexport declare class JsonpInterceptor {\n    private jsonp;\n    constructor(jsonp: JsonpClientBackend);\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>>;\n}\n"]}