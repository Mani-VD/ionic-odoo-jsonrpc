{"version":3,"file":"location.d.ts","sources":["location.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { SubscriptionLike } from 'rxjs';\nimport { LocationStrategy } from './location_strategy';\n/** @publicApi */\nexport interface PopStateEvent {\n    pop?: boolean;\n    state?: any;\n    type?: string;\n    url?: string;\n}\n/**\n * @description\n *\n * A service that applications can use to interact with a browser's URL.\n *\n * Depending on which {@link LocationStrategy} is used, `Location` will either persist\n * to the URL's path or the URL's hash segment.\n *\n * @usageNotes\n *\n * It's better to use {@link Router#navigate} service to trigger route changes. Use\n * `Location` only if you need to interact with or create normalized URLs outside of\n * routing.\n *\n * `Location` is responsible for normalizing the URL against the application's base href.\n * A normalized URL is absolute from the URL host, includes the application's base href, and has no\n * trailing slash:\n * - `/my/app/user/123` is normalized\n * - `my/app/user/123` **is not** normalized\n * - `/my/app/user/123/` **is not** normalized\n *\n * ### Example\n *\n * {@example common/location/ts/path_location_component.ts region='LocationComponent'}\n *\n * @publicApi\n */\nexport declare class Location {\n    constructor(platformStrategy: LocationStrategy);\n    /**\n     * Returns the normalized URL path.\n     */\n    path(includeHash?: boolean): string;\n    /**\n     * Normalizes the given path and compares to the current normalized path.\n     */\n    isCurrentPathEqualTo(path: string, query?: string): boolean;\n    /**\n     * Given a string representing a URL, returns the normalized URL path without leading or\n     * trailing slashes.\n     */\n    normalize(url: string): string;\n    /**\n     * Given a string representing a URL, returns the platform-specific external URL path.\n     * If the given URL doesn't begin with a leading slash (`'/'`), this method adds one\n     * before normalizing. This method will also add a hash if `HashLocationStrategy` is\n     * used, or the `APP_BASE_HREF` if the `PathLocationStrategy` is in use.\n     */\n    prepareExternalUrl(url: string): string;\n    /**\n     * Changes the browsers URL to the normalized version of the given URL, and pushes a\n     * new item onto the platform's history.\n     */\n    go(path: string, query?: string, state?: any): void;\n    /**\n     * Changes the browsers URL to the normalized version of the given URL, and replaces\n     * the top item on the platform's history stack.\n     */\n    replaceState(path: string, query?: string, state?: any): void;\n    /**\n     * Navigates forward in the platform's history.\n     */\n    forward(): void;\n    /**\n     * Navigates back in the platform's history.\n     */\n    back(): void;\n    /**\n     * Subscribe to the platform's `popState` events.\n     */\n    subscribe(onNext: (value: PopStateEvent) => void, onThrow?: ((exception: any) => void) | null, onReturn?: (() => void) | null): SubscriptionLike;\n    /**\n     * Given a string of url parameters, prepend with '?' if needed, otherwise return parameters as\n     * is.\n     */\n    static normalizeQueryParams(params: string): string;\n    /**\n     * Given 2 parts of a url, join them with a slash if needed.\n     */\n    static joinWithSlash(start: string, end: string): string;\n    /**\n     * If url has a trailing slash, remove it, otherwise return url as is. This\n     * method looks for the first occurrence of either #, ?, or the end of the\n     * line as `/` characters after any of these should not be replaced.\n     */\n    static stripTrailingSlash(url: string): string;\n}\n"]}